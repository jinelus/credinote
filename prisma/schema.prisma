// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  UNPAID
  PAID
}

enum PaymentMethod {
  CASH
  CARD
  PIX
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  users     User[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  clients   Client[]

  @@map("organizations")
}

model Client {
  id             String    @id @default(uuid())
  name           String
  cpf            String    @unique
  telephone      String
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  amount         Decimal   @db.Decimal(10, 2)
  organizationId String    @map("organization_id")
  Order          Order[]
  Payment        Payment[]

  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("clients")
}

model Order {
  id    String   @id @default(uuid())
  date  DateTime @default(now())
  total Decimal  @db.Decimal(10, 2)

  clientId String @map("id_client")

  client Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@map("orders")
}

model Payment {
  id       String        @id @default(uuid())
  clientId String        @map("id_client")
  amount   Decimal       @db.Decimal(10, 2)
  method   PaymentMethod @default(CASH)
  paidAt   DateTime      @map("paid_at")

  client Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@map("payments")
}

model User {
  id             String        @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
